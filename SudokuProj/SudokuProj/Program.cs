using System; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Text; using System.Threading.Tasks; namespace SudokuProj {     class Program     {         static void Main(string[] args)         {             //int[][] goodSudoku1 = {             //    new int[] {7,8,4,  1,5,9,  3,2,6},             //    new int[] {5,3,9,  6,7,2,  8,4,1},             //    new int[] {6,1,2,  4,3,8,  7,5,9},             //    new int[] {9,2,8,  7,1,5,  4,6,3},             //    new int[] {3,5,7,  8,4,6,  1,9,2},             //    new int[] {4,6,1,  9,2,3,  5,8,7},             //    new int[] {8,7,6,  3,9,4,  2,1,5},             //    new int[] {2,4,3,  5,6,1,  9,7,8},             //    new int[] {1,9,5,  2,8,7,  6,3,4}             //};             int[][] goodSudoku1 = {                 new int[] {7,8,4,  1,5,9,  3,2,6} ,                 new int[] {5,3,9,  6,7,2,  8,4,1} ,                 new int[] {6,1,2,  4,3,8,  7,5,9} ,                  new int[] {9,2,8,  7,1,5,  4,6,3} ,                 new int[] {3,5,7,  8,4,6,  1,9,2} ,                 new int[] {4,6,1,  9,2,3,  5,8,7} ,                  new int[] {8,7,6,  3,9,4,  2,1,5} ,                 new int[] {2,4,3,  5,6,1,  9,7,8} ,                 new int[] {1,9,5,  2,8,7,  6,3,4}             } ;              int[][] goodSudoku2 = {                 new int[] {1,4, 2,3},                 new int[] {3,2, 4,1},                  new int[] {4,1, 3,2},                 new int[] {2,3, 1,4}             };              //16x16 sudoku             int[][] goodSudoku3 = {                 new int[]{ 1, 2, 3, 4,5, 6, 7, 8,9, 10, 11, 12,13, 14, 15, 16} ,                 new int[]{ 5, 6, 7, 8,13, 14, 15, 16,1, 2, 3, 4,9, 10, 11, 12} ,                 new int[]{ 9, 10, 11, 12,1, 2, 3, 4,13, 14, 15, 16,5, 6, 7, 8} ,                 new int[]{ 13, 14, 15, 16,9, 10, 11, 12,5, 6, 7, 8,1, 2, 3, 4} ,                  new int[]{ 2, 4, 1, 3,8, 9, 10, 5,14, 11, 12, 6,16, 15, 13, 7} ,                 new int[]{ 15, 11, 12, 14,16, 4, 1, 6,2, 13, 5, 7,8, 3, 9, 10} ,                 new int[]{ 7, 13, 16, 9,14, 11, 2, 15,8, 3, 10, 1,6, 4, 12, 5} ,                 new int[]{ 8, 5, 10, 6,3, 7, 12, 13,15, 16, 4, 9,11, 1, 2, 14} ,                  new int[]{ 3, 1, 8, 2,6, 5, 9, 7,11, 4, 16, 13,10, 12, 14, 15} ,                 new int[]{ 12, 7, 4, 13,11, 15, 14, 1,3, 9, 8, 10,2, 16, 5, 6} ,                 new int[]{ 14, 16, 9, 10,4, 12, 13, 2,6, 5, 1, 15,3, 7, 8, 11} ,                 new int[]{ 6, 15, 5, 11,10, 8, 16, 3,7, 12, 2, 14,4, 9, 1, 13} ,                  new int[]{ 4, 8, 6, 1,12, 3, 5, 11,10, 7, 14, 2,15, 13, 16, 9} ,                 new int[]{ 10, 3, 13, 15,7, 16, 8, 9,12, 1, 6, 5,14, 11, 4, 2} ,                 new int[]{ 11, 12, 14, 5,2, 13, 4, 10,16, 15, 9, 3,7, 8, 6, 1} ,                 new int[]{ 16, 9, 2, 7,15, 1, 6, 14,4, 8, 13, 11,12, 5, 10, 3} ,             } ;              int[][] badSudoku1 =  {                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                  new int[] {2,1,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                  new int[] {1,2,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9} ,                 new int[] {1,2,3, 4,5,6, 7,8,9}             } ;              int[][] badSudoku2 = {                 new int[] {1,2,3,4,5} ,                 new int[] {1,2,3,4} ,                 new int[] {1,2,3,4} ,                 new int[] {1}             } ;             //Debug.Assert(validate(badSudoku1), "This is supposed to validate! It's a good sudoku!");             //validate(goodSudoku1);             Console.WriteLine(validate(goodSudoku1));             Console.WriteLine(validate(goodSudoku2));             Console.WriteLine(validate(goodSudoku3));             Console.WriteLine(validate(badSudoku1));             Console.WriteLine(validate(badSudoku2));         }         static bool validate(int[][] puzzle)         {             //int a;              int length = puzzle.Length;              for (int j = 0; j < length; j++)             {                 for (int i = 0; i < length; i++)                 {                     //Console.WriteLine(length);                     //counts number of columns and rows                     if (puzzle[j].Length != length || puzzle[i].Length != length)                     {                         //Console.WriteLine("Invalid number of columns or rows");                         return false;                     }                     var sqroot = (Math.Sqrt(length));                      if (sqroot % 1 != 0)                     {                         return false;                     }                     //checks if numbers entered are between 0 and puzzle length                     if (puzzle[i][j] < 0 || puzzle[i][j] > puzzle.Length)                     {                         //Console.WriteLine("Invalid, enter numbers between 1 and " + puzzle.Length);                         return false;                     }                      //check for valid whole numbers                     string type = puzzle[i][j].GetTypeCode() + "";                     if (type != "Int32")                     {                         //Console.WriteLine("Invalid numbers");                         return false;                     }                 }             }             //Check for duplicates in the rows             for (int countRow = 0; countRow < length; countRow++)             {                 var row = Enumerable.Range(0, length).Select(x => puzzle[countRow][x]);                 if (row.Distinct().Count() != length)                 {                     //Console.WriteLine("Duplicated value in row {0} : {1}", countRow + 1, string.Join(", ", row));                     return false;                 }             }             //Check for duplicates in the columns             for (int countCol = 0; countCol < length; countCol++)             {                 var column = Enumerable.Range(0, length).Select(x => puzzle[x][countCol]);                 if (column.Distinct().Count() != length)                 {                     //Console.WriteLine("Duplicated value in column {0} : {1}", countCol + 1, string.Join(", ", column));                     return false;                 }             }             return true;         }     } }   